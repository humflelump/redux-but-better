{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["t","performance","now","atoms","len","L","i","push","ar","split","window","location","href","length","Number","getCount","map","atom","key","String","default","console","log","Item","props","index","useRecoilState","val","setVal","onClick","App6","React","memo","a","Boolean","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAyBA,IAQIA,EAAIC,YAAYC,MACdC,EATG,SAAAC,GAEP,IADA,IAAIC,EAAI,GACCC,EAAI,EAAGA,EAAIF,EAAM,EAAGE,IAC3BD,EAAEE,KAAKD,GAET,OAAOD,EAIKG,CAhBd,WACE,IACMC,EADMC,OAAOC,SAASC,KACVH,MAAM,SACxB,OAAIA,EAAMI,OAAS,EAAU,IACtBC,OAAOL,EAAM,IAYLM,IAAYC,KAAI,SAAAV,GAAC,OAChCW,eAAK,CACHC,IAAKC,OAAOb,GAAK,KACjBc,QAASd,OAGbe,QAAQC,IAAI,SAAUrB,YAAYC,MAAQF,GAE1C,IAAMuB,EAAO,SAACC,GAA8B,IAClCC,EAAUD,EAAVC,MADiC,EAEnBC,yBAAevB,EAAMsB,IAFF,mBAElCE,EAFkC,KAE7BC,EAF6B,KAGzC,OAAO,yBAAKC,QAAS,kBAAMD,EAAOD,EAAM,KAAKA,IAehCG,EAZFC,IAAMC,MAAK,WACtB,OACE,kBAAC,aAAD,KACE,6BACG7B,EAAMa,KAAI,SAACiB,EAAG3B,GAAJ,OACT,kBAAC,EAAD,CAAMY,IAAKZ,EAAGmB,MAAOnB,YCzCX4B,QACW,cAA7BxB,OAAOC,SAASwB,UAEe,UAA7BzB,OAAOC,SAASwB,UAEhBzB,OAAOC,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.0bac126d.chunk.js","sourcesContent":["import { createMolecule } from \"./lib/functions/createMolecule\";\nimport { Selector } from \"./lib/core/Selector\";\nimport { createAction } from \"./lib/functions/createAction\";\nimport { useAtom } from \"./lib/hooks/useAtom\";\nimport { useSelector } from \"./lib/hooks/useSelector\";\nimport { createAsyncAction } from \"./lib/functions/createAsyncAction\";\nimport { Atom } from \"./lib/core/Atom\";\nimport { createAsyncSelector } from \"./lib/functions/createAsyncSelector\";\nimport { useMolecule } from \"./lib/hooks/useMolecule\";\nimport { useCell } from \"./lib/hooks/useCell\";\nimport { DynamicSelector } from \"./lib/core/DynamicSelector\";\nimport { createSubscription } from \"./lib/functions/createSubscription\";\nimport { store } from \"./lib/store\";\nimport { createId } from \"./lib/helpers/createId\";\nimport { atom, useRecoilState, useRecoilValue, RecoilRoot } from \"recoil\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\n\nfunction getCount() {\n  const str = window.location.href;\n  const split = str.split(\"?num=\");\n  if (split.length < 2) return 100;\n  return Number(split[1]);\n}\n\nvar ar = len => {\n  var L = [] as any;\n  for (let i = 1; i < len + 1; i++) {\n    L.push(i);\n  }\n  return L;\n};\n\nlet t = performance.now();\nconst atoms = ar(getCount()).map(i =>\n  atom({\n    key: String(i) + \"__\",\n    default: i\n  })\n);\nconsole.log(\"gen in\", performance.now() - t);\n\nconst Item = (props: { index: number }) => {\n  const { index } = props;\n  const [val, setVal] = useRecoilState(atoms[index]);\n  return <div onClick={() => setVal(val + 1)}>{val}</div>;\n};\n\nconst App6 = React.memo(() => {\n  return (\n    <RecoilRoot>\n      <div>\n        {atoms.map((a, i) => (\n          <Item key={i} index={i} />\n        ))}\n      </div>\n    </RecoilRoot>\n  );\n});\n\nexport default App6;\n\n// const atoms = ar(100000).map(\n//   i =>\n//     new Atom({\n//       id: String(i) + \"__\",\n//       data: i\n//     })\n// );\n\n// const Item = (props: { index: number }) => {\n//   const { index } = props;\n//   const [val, setVal] = useAtom(atoms[index]);\n//   return <div onClick={() => setVal(val + 1)}>{val}</div>;\n// };\n\n// const App6 = React.memo(() => {\n//   return (\n//     <div>\n//       {atoms.map((a, i) => (\n//         <Item key={i} index={i} />\n//       ))}\n//     </div>\n//   );\n// });\n\n// export default App6;\n\n// import * as z from \"react-redux\";\n// import * as x from \"redux-toolkit\";\n// import * as c from \"redux\";\n// import * as v from \"redux-saga\";\n\n// const format = new Atom({ id: \"format\", data: \"unix\" });\n\n// const counter: any = atom({\n//   key: \"myCounter\",\n//   default: 0\n// });\n// setTimeout(() => {\n//   console.log({ counter }, counter);\n// }, 3000);\n\n// const data = {} as any;\n\n// const [getTime, setTime] = (createSubscription as any)({\n//   id: \"sub\",\n//   inputs: [format],\n//   onInputsChanged: ([newFormat], old, setTime) => {\n//     // No need to do anything here, but normally you can notify the server\n//   },\n//   onSubscriptionsChanged: (newSubs, oldSubs, setTime) => {\n//     if (newSubs.length === 0 && oldSubs.length > 0) {\n//       clearInterval(data.interval);\n//     } else if (oldSubs.length === 0 && newSubs.length > 0) {\n//       data.interval = setInterval(() => {\n//         if (format.get() === \"unix\") {\n//           setTime(Date.now() / 1000);\n//         } else {\n//           setTime(Date.now());\n//         }\n//       }, 100);\n//     }\n//   }\n// });\n\n// console.log(\n//   createSubscription,\n//   DynamicSelector,\n//   useCell,\n//   useMolecule,\n//   createAsyncSelector,\n//   Atom,\n//   createAsyncAction,\n//   useSelector,\n//   useAtom,\n//   createAction,\n//   Selector,\n//   createMolecule\n// );\n// const mol = createMolecule({\n//   key: \"slice\",\n//   metadata: \"myslice\",\n//   slice: {\n//     hey: \"wow\",\n//     yo: \"um\"\n//   }\n// });\n\n// const doubled = new Selector({\n//   id: \"ay\",\n//   inputs: [mol.hey],\n//   func: s => s + s\n// });\n\n// const reset = createAction({\n//   id: \"wowowow\",\n//   inputs: [],\n//   atoms: [mol.hey, mol.yo],\n//   func: (setHey, setYo) => {\n//     setHey(\"!!!\");\n//     setYo(\"!!!\");\n//   }\n// });\n\n// const App1 = React.memo(() => {\n//   const [value, setValue] = useAtom(mol.hey);\n//   const d = useSelector(doubled);\n//   return (\n//     <div onClick={() => setValue(value + \"!\")}>\n//       {value}\n//       {d}\n//     </div>\n//   );\n// });\n\n// const App2 = React.memo(() => {\n//   const [value, setValue] = useAtom(mol.yo);\n//   return <div onClick={() => setValue(value + \"!\")}>{value}</div>;\n// });\n\n// const [asyncAction, isLoading, getError] = createAsyncAction({\n//   id: \"53535\",\n//   atoms: [mol.hey],\n//   inputs: [mol.hey],\n//   func: async (setHey, hey, state) => {\n//     await new Promise(res => setTimeout(res, 2000));\n//     if (state.cancelled) return;\n//     setHey(hey + hey);\n//   }\n// });\n\n// const App3 = () => {\n//   const l = useSelector(isLoading);\n//   return (\n//     <button onClick={asyncAction}>{l ? \"Loading...\" : \"async action\"}</button>\n//   );\n// };\n\n// const a = new Atom({\n//   id: \"345345435\",\n//   data: \"wow\"\n// });\n\n// const [asyncSelector, aL, err, forceUpdate] = createAsyncSelector({\n//   defaultValue: \"wowwow\",\n//   inputs: [a],\n//   func: async (text, state) => {\n//     await new Promise(res => setTimeout(res, 2000));\n//     return text + text + Math.random();\n//   },\n//   id: \"yoyyooy\"\n// });\n\n// const App4 = React.memo(() => {\n//   const [text, setText] = useAtom(a);\n//   useSelector(doubled);\n//   const loading = useSelector(aL as any);\n//   const double = useSelector(asyncSelector as any);\n//   return (\n//     <div>\n//       <button onClick={() => setText(text + \"!\")}>\n//         {!loading ? \"click\" : \"loading\"}\n//       </button>\n//       <button onClick={forceUpdate}>force</button>\n//       <div>double: {double}</div>\n//     </div>\n//   );\n// });\n\n// const Toggle = ({ children }) => {\n//   const [open, setOpen] = React.useState(true);\n//   return (\n//     <div>\n//       <button onClick={() => setOpen(!open)}>close</button>\n//       {open ? children : null}\n//     </div>\n//   );\n// };\n\n// var ar = len => {\n//   var L = [] as any;\n//   for (let i = 1; i < len + 1; i++) {\n//     L.push(i);\n//   }\n//   return L;\n// };\n\n// const atoms = ar(5).map(\n//   i =>\n//     new Atom({\n//       id: String(i) + \"__\",\n//       data: i\n//     })\n// );\n\n// const Item = (props: { index: number }) => {\n//   const { index } = props;\n//   const [val, setVal] = useAtom(atoms[index]);\n//   return <div onClick={() => setVal(val + 1)}>{val}</div>;\n// };\n\n// const App6 = React.memo(() => {\n//   return (\n//     <div>\n//       {atoms.map((a, i) => (\n//         <Item key={i} index={i} />\n//       ))}\n//     </div>\n//   );\n// });\n\n// const ChildComp = (props: { num: number }) => {\n//   const numAtom = useMolecule(props).num;\n//   const select = useCell(() => {\n//     return new Selector({\n//       id: \"wowow\",\n//       inputs: [numAtom],\n//       func: num => num * 10\n//     });\n//   });\n//   return (\n//     <div>\n//       {numAtom.get()}, {select.get()}\n//     </div>\n//   );\n// };\n\n// const ParentComp = () => {\n//   const [num, setNum] = React.useState(1);\n//   return (\n//     <div>\n//       <button onClick={() => setNum(num + 1)}>increment</button>\n//       <ChildComp num={num} />\n//       <ChildComp num={66} />\n//     </div>\n//   );\n// };\n\n// const a1 = new Atom({\n//   id: \"a1\",\n//   data: \"a1\"\n// });\n\n// const a2 = new Atom({\n//   id: \"a2\",\n//   data: \"a2\"\n// });\n\n// const switch_ = new Atom({\n//   id: \"SWITCH\",\n//   data: true\n// });\n\n// class UndoManager {\n//   list = [] as any[];\n//   index = 0;\n//   shouldAddToList = true;\n\n//   constructor() {\n//     store.subscribeToChangedAtoms((atom, prev) => {\n//       if (this.shouldAddToList === true) {\n//         if (atom.metadata !== \"myslice\") return;\n//         if (this.list.length === 0) {\n//           this.list.push([atom, prev]);\n//         }\n//         this.list.push([atom, atom.get()]);\n//         this.index = this.list.length - 1;\n//       }\n//     });\n//   }\n\n//   jump(index) {\n//     this.shouldAddToList = false;\n//     this.list[index][0].set(this.list[index][1]);\n//     this.shouldAddToList = true;\n//   }\n\n//   undo() {\n//     if (this.index > 0) {\n//       this.index -= 1;\n//       this.jump(this.index);\n//     }\n//   }\n\n//   redo() {\n//     if (this.index < this.list.length - 1) {\n//       this.index += 1;\n//       this.jump(this.index);\n//     }\n//   }\n// }\n// const undoManager = new UndoManager();\n\n// const dynSel = new DynamicSelector({\n//   func: get => {\n//     if (get(switch_) === true) {\n//       return get(a1);\n//     } else {\n//       return get(a2);\n//     }\n//   }\n// });\n\n// const App7 = React.memo(() => {\n//   const val = useSelector(dynSel);\n//   const [switchVal, setSwitch] = useAtom(switch_);\n//   return (\n//     <div>\n//       <button onClick={() => setSwitch(!switchVal)}>toggle</button>\n//       <div>{val}</div>\n//     </div>\n//   );\n// });\n\n// const [sub] = createSubscription({\n//   id: \"hththt\",\n//   data: \"mydata\",\n//   inputs: [dynSel]\n// });\n\n// const App8 = React.memo(() => {\n//   const data = useSelector(sub);\n//   return <div>sub: {data}</div>;\n// });\n\n// const App9 = () => {\n//   return (\n//     <div>\n//       <button onClick={() => undoManager.undo()}>Undo</button>\n//       <button onClick={() => undoManager.redo()}>Redo</button>\n//     </div>\n//   );\n// };\n\n// const atomatom = new Atom({\n//   id: \"atomatom\",\n//   data: [] as Group[]\n// });\n\n// const sum = new DynamicSelector({\n//   id: \"wowowowooww\",\n//   func: get => {\n//     const atoms = get(atomatom);\n//     let s = 0;\n//     if (atoms[0]) {\n//       s += get(atoms[0].selector);\n//     }\n//     return s;\n//   }\n// });\n\n// function createGroup() {\n//   const next = new Atom({\n//     id: createId(),\n//     data: 10\n//   });\n//   const selector = new Selector({\n//     id: createId(),\n//     inputs: [next],\n//     func: val => val * val\n//   });\n//   return { next, selector };\n// }\n\n// type Group = ReturnType<typeof createGroup>;\n\n// const addAtom = createAction({\n//   id: \"addAction\",\n//   inputs: [atomatom],\n//   atoms: [atomatom],\n//   func: (setter, atoms) => {\n//     const group = createGroup();\n//     setter([...atoms, group]);\n//   }\n// });\n\n// const ChildBlah = React.memo((props: { atom: Group }) => {\n//   const [val, setVal] = useAtom(props.atom.next);\n//   const square = useSelector(props.atom.selector);\n//   console.log(\"render\", val);\n//   return (\n//     <div onClick={() => setVal(val + 1)}>\n//       {val}:{square}\n//     </div>\n//   );\n// });\n\n// const App10 = () => {\n//   const [atoms] = useAtom(atomatom);\n//   const total = useSelector(sum);\n//   return (\n//     <div>\n//       <button onClick={addAtom}>New Atom!</button>\n//       {atoms.map((atom, index) => {\n//         return <ChildBlah atom={atom} key={index} />;\n//       })}\n//       <div>total: ${total}</div>\n//     </div>\n//   );\n// };\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Toggle>\n//         <App1 />\n//         <App2 />\n//         <button onClick={reset}>reset</button>\n//         <App3 />\n//         <App4 />\n//         <App6 />\n//         <ParentComp />\n//         <App7 />\n//         <App8 />\n//         <App9 />\n//         <App10 />\n//       </Toggle>\n//     </div>\n//   );\n// }\n\n// setTimeout(() => {\n//   console.log(\"rumhmghm\", store.toJSON());\n// }, 5000);\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}